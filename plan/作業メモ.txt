<やること>
・データの受け渡しができているかのテスト
・得点表示が更新できるか
・README制作
・点数計算モジュール

○手牌オブジェクトの修正（ゆきや・りん）
→条件オブジェクトを参考に修正

○点数計算開始ボタン作成（ゆきや）
→機能としては、
・非同期通信として、点数計算実行ビュー（calculate_score_api）を呼び出す
・手牌選択ボタンと条件選択ボタンを押す（手牌情報と条件情報を保存）していないと押せないor警告文を出す

○点数表示モジュールの仕上げ（よしふみ）
→
calculate_score_apiの返し値（JsonResponse）を受け取り、その内容を非同期通信として
点数表示欄に表示するJavascriptファイルとテンプレート（htmlファイル）を作る。

○計算モジュール完成（りょうな・ひびき・りん）
→足りないところを作る。点数受け渡しや計算のテストを行う。

○班wiki仕上げ（りん）

○技術選定（りん）

◯フロント
・htmlとcssをそれぞれ別ファイルで書き換えて、かつそれぞれのhtmlに一対一対応でcssを作る。
・上記のあと、html内のPython、Djangoで書き換えられそうな処理を書き換える。
・決定ボタンを作る。
・デザインを綺麗にする。
・UI（User　Interface）を良くする
→視覚的な情報（デザイン・フォント・色・画像・アイコン）、操作性の要素（ボタンの配置・操作方法・導線・機能的な要素）
・画面遷移を行わずデータのやり取りを行う
→非同期通信

<やったこと>
・牌データの送信ボタンの作成
・ScoreResultからデータ取得をする関数の作成
・画面遷移を行わずデータのやり取りを行う
→非同期通信

◯バックエンド
・点数計算モジュールが手牌オブジェクトと条件オブジェクトを取得するビューを書く。
・点数計算モジュールが点数結果オブジェクトを点数表示モジュールに渡すビューを書く。
・非同期通信に対応出来るように、各ビューを書き直す。
・点数計算結果を8000,16000のように子、親の点数申告をするか、32000のように合計点数のみをモジュールに渡すか
・手牌 or 条件オブジェクトに親か子かを選ぶフィールドを作る。
☆6/20現在の問題点追加
・満貫、跳満などの表示をするか否か
・副露、特に大明槓、加槓の受け取り方をどうするか
・切り上げ満貫の解消法
・符計算で使う条件（単騎待ち、篏張、辺張、平和ツモなどの特殊系など）の実装


＜不明点＞
・html, css, js, Djangoの具体的な連携方法
・非同期通信の方法
・Django、JavaSciript、Vue.jsそれぞれの役割と使い方。（りん）
・APIとして構成する方法。（kindle）(りん)
・

<gitlabコマンド>
・git add .
追加するファイルやディレクトリを決定(上記のコマンドだと全て)

・git commit -a　-m "（適当なコメント）"
追加するファイルやディレクトリを確定させる。(コメントは必須)

・git push
commitして確定させてファイルやディレクトリをGitLabサーバに送り込む

・git clone ...
手元に作業コピーを作る

・git pull 
他のメンバーがpushした変更を取り込む

rebaseあぶない

・rebaseはやらないで

・ まとめ（pull前に変更してしまったら）
まずは  git branch
そこで出てきたbranchを git pull origin 〇〇←に入れる
pullするときはgit pull origin 〇〇にしたほうがいいっぽい
状況	　　　　　　　　対応
作業を保存したい	　　add → commit → pull
まだ commit したくない（作業途中）	git stash → pull → git stash pop
pull でコンフリクトした	手動修正 → add → commit

・C:\Users\n1013\MSC_project\venv\Scripts\Activate.ps1
仮想環境アクティベート


 
 ＜班wiki　参考＞
・２４年　０５
・２３年　１１
