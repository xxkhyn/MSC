ーーーーー条件モジュールの全体像ーーーーー

◯構成ファイル説明

＜フロントエンド＞
◯condition.html:
・条件ページの出力
・POSTやGETのリクエストを出す

◯condition.css:
・htmlのページを良くする

◯condition.js:
・htmlのページに動きをつける

＜バックエンド＞
◯views.py(condition_input_view)
・ユーザーが条件を選択する画面の表示
・各リクエストの処理
・条件オブジェクトの生成
・条件オブジェクトを点数計算オブジェクトに譲渡

◯forms.py(ConditionForm)
・ユーザー入力の形式・項目を定義、バリデーションを行う

◯models.py(Condition)
・選択された条件を構造化して保存・処理するために保持する

◯条件モジュール全体の流れ
１．入力フォーム表示（condition.html, condition.js）
２．ブラウザが、POSTリクエストを送信。（condition.html, condition.js）
３．ビューがリクエストを受け取る。(views.py)
４．ビューがフォームを呼び出し、ユーザーが入力した値の検証・整形を行う。
５．フォームが処理したデータを、ビューが条件オブジェクトとして保存する。
６．views.pyが、点数計算モジュールにHandオブジェクト・Conditionオブジェクトを渡す


アプリ全体の流れの精査！！！！

<<手牌モジュール>>
!!担当者
沼田倫・畑山佳史・風穴倖弥

!!仕様
*手牌モジュール全体の流れ<br>
①入力フォーム表示（hand.html, hand.css）<br>
②ブラウザが、入力情報（POSTリクエスト）を送信。（hand.html, hand.js）<br>
③手牌モジュール（ビュー）が入力情報を受け取る。（views.py, fomrs.py）<br>
④データを加工するバックエンド処理をする。（ビューがフォームを呼び出し、ユーザーが入力した値の検証・整形を行う）（views.py, forms.py）<br>
⑤手牌モジュールがオブジェクトとしてデータを保存する。（フォームが処理したデータを、ビューが手牌オブジェクトとして保存する。）（views.py）<br>
⑥点数計算モジュールに手牌オブジェクトを渡す。（ビューがHandオブジェクトを渡す。）(ビューがConditionオブジェクトを渡す)（views.py）<br>

!!ファイルごとの機能
○フロントエンド<br>
・hand.html<br>
→手牌選択部分のページの入力フォームを作る。テキストや画像を配置。

・hand.css<br>
→手牌選択部分のページのレイアウトを整える。

・hand.js<br>
→入力欄の制御・選択済みかどうかの切り替え・入力状況の保存。

○バックエンド<br>
・views.py(hand_input_view)<br>
・forms.py(HandForm)<br>
・models.py<br>

!!進捗

!!現状のやること・問題点

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

<<点数計算モジュール>>
!!担当者
沼田倫・伊藤遼那・福田響

!!仕様
*点数計算モジュール全体の流れ
①calculate_score_viewがHandオブジェクトとConditionオブジェクトを取得する。（views.py）
②calculate_score_viewがcalculate_score()関数を呼び出し、HandオブジェクトとConditionオブジェクトを引数として渡す（views.py）
③calculate_score()関数が以降の関数を呼び出して、処理を行う。
④parser.pyのparse_hand()関数がHandオブジェクト(ParsedHand)から手牌・副露・和了牌などを抽出・整理し、解析済み手牌構造を生成する。
⑤validator.pyのvalidate_hand()関数がParsedHandとConditionオブジェクトを照らし合わせ、ルールに反していないかをチェックする。
⑥evaluator.pyのevaluate_hand()がParsedHandとConditionをもとに役を判定し、翻数・符数を計算し点数を算出する。
⑦Caluculator.pyのcalculate_score()がその結果をScoreResultオブジェクトにまとめる。

!!ファイルごとの機能
○フロントエンド
なし

○バックエンド
・views.py(calculate_score_view)
→処理の流れを制御。モデルを保存・取得し各コンポーネントに受け渡しする。

scorerディレクトリ

・calculator.py
→外部（views.pyなど）からの呼び出し用ファイル。views.pyはこのファイルを呼ぶだけで点数計算が行える様にする。
　以下の各ファイルの処理を順番に呼び出す。

・parser.py
→手牌オブジェクトを解析し、面子・雀頭・副露などの構造に変換する処理を記述するファイル。

・validator.py
→入力された手牌・条件が点数計算可能かをチェックする処理を記述するファイル。

・evaluator.py
→点数・翻・符数・役の判定を担当するメインロジック

・result_object.py
→点数・翻・役・エラーメッセージ等を格納するオブジェクトを定義し、テンプレート・ビューに受け渡しやすくする。

!!進捗

!!現状のやること・問題点

ーーーーーーーーーーーーーーーーーーーーーーーー

<<点数表示モジュール>>
!!担当者
沼田倫・畑山佳史・風穴倖弥

!!仕様
*点数表示モジュール全体の流れ
①views.pyのscore_result_view関数が、ScoreResultの主キー（result_id）をもとにオブジェクトを取得する（get_object_or_404）
②取得したScoreResultオブジェクトをコンテキストとしてテンプレートに渡す。
③score_result.htmlがScoreResultオブジェクトの各フィールドを（点数・符数・翻数・構成役のリスト）を表示用に展開する。

!!ファイルごとの機能
○フロントエンド
○バックエンド

!!進捗

!!現状のやること・問題点

















<<手牌モジュール>>
!!担当者
沼田倫・畑山佳史・風穴倖弥

!!仕様

!!ファイルごとの機能
○フロントエンド
○バックエンド

!!進捗

!!現状のやること・問題点