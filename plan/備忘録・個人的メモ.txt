ーーーーーDjangoはテンプレートHTMLを直接URLで読み込めないーーーーー

<iframe src="tehai1.html"></iframe>  ←　このような記述だと接続拒否になる

Djangoは templates/ のファイルは、render()を通じてビューから返されるものだけがブラウザに届く。
static/ に置けば直接読み込むこともできるが、HTMLはテンプレート処理ができないためテンプレート機能を使うならビュー経由が基本。


ーーーーーurls.pyの用途ーーーーー

役割としては、URLパスとビュー関数（処理）を紐付ける
urls.pyに記述するエンドポイントは「必ずしもページ（テンプレート）を返す必要はない」

①ページ表示用
ブラウザがアクセスして表示する「画面」のURL

②データ処理用（AJAXなどから使うAPI的なURL）
JavaScriptなどからPOST送信するためのデータ専用URL
HTMLページを返さなくてもOK。必要ならJsonResponseやHttpResponseを返す
画面遷移しない通信を支える

APIエンドポイント
→サーバー側でデータの受け口となるURLのこと

URL　=　エンドポイントであり、システムやサービスにおいて「外部からアクセス出来る入口（接続点）」のことを指す
Djangoでは、urls.pyでこの出入り口（URL）を設定し、views.pyでその出入り口から入ってきたリクエストを処理する。

手牌や条件情報の保存を行う際に記述するurls.pyのエンドポイントURLは画面表示ではなく、
非同期通信でバックエンド処理を行うための「API的な入口」

ＵＸとは
ＳＰＡとは

ーーーーー非同期通信（画面遷移を行わない処理）に関してーーーーー
「redirect」を使うと送信後にページ遷移が発生する。
画面遷移せずに操作するためにはredirectを使わず、Javascriptの「fetch」を使う。


また、Form(request.POST)でフォームデータを処理していたが、「fetch」で送信されたデータは、request.bodyからしか取り出せない
JSONデータを受け取るためにはrequest.bodyを使って、明示的にjson.loads()でパースする処理に分ける必要がある。

DjangoのFormクラスは、HTMLの<form>からの送信に特化している
JavaScriptベースのインタフェース（ボタン選択など）とは直接的なつながりはない

JavaScriptのUIとDjango　Formの構造がズレると、意図通りのデータが送れない/受け取れない
btn.js等で状態管理しているなら、その状態を直接JSONに変換して送る方が効率的

JS 側でフォームを持たずに状態（選択された項目など）を保持し、そのまま JSON で送信するように設計。
Django 側も JSON で受け取る専用のビュー（API）を用意する。

return render(...)でテンプレートを返しているが、indexページではすでにテンプレートを部分的にincludeで表示済み
→テンプレートを再描画しても、それはindex.htmlには反映されず、JavaScriptからの動的な更新には役立たない
→index.htmlに固定された構造を壊さず、JavaScriptで更新していく必要がある。

return JsonResponse(...)に切り替え、画面遷移もテンプレート描画も行わない構成に変更する。

フォーム送信型　→　簡単
SPA型　→　難しい（今回のアプリ）

フォーム送信型で作ってSPA型に持っていくのも出来るらしい

・モデルの再定義をした際の注意点
→「マイグレーションずれ」に注意！

ーーー対処手順ーーー
①テーブル構造を再構築する。

・マイグレーションファイルの再作成
python manage.py makemigrations MSC

MSC/migrations/ に新しいファイルが生成されることを確認

・マイグレーションの適用
python manage.py migrate

正常に完了すればOK
すでにplayer_typeを追加したマイグレーションがあるのにmigrateが通らない場合は、一度fakeを解除して再実行します。

②それでも直らない場合（強制再構築）
最終手段として、SQLiteデータベースをリセットする方法（開発中だけ推奨）

rm db.sqlite3
find MSC/migrations -name "*.py" -not -name "__init__.py" -delete
find MSC/migrations -name "*.pyc" -delete

python manage.py makemigrations
python manage.py migrate

・再確認：player_type カラムが反映されているか確認
python manage.py dbshell
.schema MSC_condition;

以下のような行が出てくるか確認
"player_type" varchar(6) NOT NULL
